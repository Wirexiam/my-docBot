from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext

from states.components.live_adress import LiveAdress
from states.components.phone_number import PhoneNumberStates  # ‚Üê –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è —à–∞–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
from localization import _
from data_manager import SecureDataManager

live_adress_router = Router()
data_manager = SecureDataManager()


@live_adress_router.callback_query(LiveAdress.adress)
async def ask_live_adress(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å.
    –í–ê–ñ–ù–û: –∑–∞—Ä–∞–Ω–µ–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–ª—å—à–µ –∂–¥—ë–º 'live_adress'.
    """
    state_data = await state.get_data()
    lang = state_data.get("language", "ru")

    # —Ñ–æ–ª–±—ç–∫ —Ç–µ–∫—Å—Ç–æ–≤
    title = _.get_text("live_adress.title", lang)
    if title.startswith("[Missing:"):
        title = "üìù –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –†–§ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
    example = _.get_text("live_adress.example", lang)
    if example.startswith("[Missing:"):
        example = "–§–æ—Ä–º–∞—Ç: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–≤–∞—Ä—Ç–∏—Ä–∞."

    if state_data.get("live_adress_conf") is None:
        photo_path = "static/live_adress_example.png"
        text = f"{title}\n{example}"
    else:
        photo_path = "static/live_adress.png"
        text_key = _.get_text("adress_residence_permit", lang)
        text = text_key if not text_key.startswith("[Missing:") else title

    # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –∂–¥—ë–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
    await state.update_data(waiting_data="live_adress")

    try:
        photo = FSInputFile(photo_path)
        await call.message.answer_photo(photo=photo, caption=text)
    except Exception:
        # –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await call.message.answer(text)

    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ LiveAdress.adress ‚Äî –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@live_adress_router.message(LiveAdress.adress)
async def handle_live_adress(message: Message, state: FSMContext):
    state_data = await state.get_data()
    lang = state_data.get("language", "ru")
    waiting_data = state_data.get("waiting_data")
    session_id = state_data.get("session_id")

    value = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    if waiting_data and "." in waiting_data:
        pkey, skey = waiting_data.split(".", 1)
        container = state_data.get(pkey) or {}
        container[skey] = value
        await state.update_data({pkey: container})
        data_manager.save_user_data(message.from_user.id, session_id, {pkey: container})
    else:
        key = waiting_data or "live_adress"
        await state.update_data({key: value})
        data_manager.save_user_data(message.from_user.id, session_id, {key: value})

    # --- –ü–µ—Ä–µ—Ö–æ–¥—ã ---
    state_data = await state.get_data()
    next_states = state_data.get("next_states") or []
    from_action = state_data.get("from_action")

    # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –≤–∏–¥–Ω–æ, –∫—É–¥–∞ –∏–¥—ë–º
    print(">>> live_adress next_states:", next_states, "from_action:", from_action)

    if next_states:
        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–º –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –æ—à–∏–±–∫–µ –æ–∫–∞–∑–∞–ª—Å—è —Ç–µ–∫—É—â–∏–π —Å—Ç–µ–π—Ç ‚Äî –≤—ã–±—Ä–æ—Å–∏–º –µ–≥–æ
        try:
            from states.components.live_adress import LiveAdress as _LA
            while next_states and next_states[0] == _LA.adress:
                next_states = next_states[1:]
        except Exception:
            pass

        if next_states:
            next_state = next_states[0]
            rest = next_states[1:]
            await state.update_data(next_states=rest)
        else:
            next_state = None

        if next_state == PhoneNumberStates.phone_number_input:
            await state.update_data(waiting_data="phone_number")
            await state.set_state(next_state)
            prompt = _.get_text("phone_number.ask", lang)
            if prompt.startswith("[Missing:"):
                prompt = "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX."
            await message.answer(prompt)
        else:
            await state.set_state(next_state)
    else:
        # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ–¥—ë–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(waiting_data="phone_number")
        await state.set_state(PhoneNumberStates.phone_number_input)
        prompt = _.get_text("phone_number.ask", lang)
        if prompt.startswith("[Missing:"):
            prompt = "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX."
        await message.answer(prompt)


handle_live_adress_input = handle_live_adress
