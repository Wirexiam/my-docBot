from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
import re

from states.components.live_adress import LiveAdress
from states.components.phone_number import PhoneNumberStates
from localization import _
from data_manager import SecureDataManager

live_adress_router = Router()
data_manager = SecureDataManager()


@live_adress_router.callback_query(LiveAdress.adress)
async def ask_live_adress(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å.
    –í–ê–ñ–ù–û: –∑–∞—Ä–∞–Ω–µ–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–ª—å—à–µ –∂–¥—ë–º 'live_adress'.
    """
    state_data = await state.get_data()
    lang = state_data.get("language", "ru")

    title = _.get_text("live_adress.title", lang)
    if title.startswith("[Missing:"):
        title = "üìù –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –†–§ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
    example = _.get_text("live_adress.example", lang)
    if example.startswith("[Missing:"):
        example = "–§–æ—Ä–º–∞—Ç: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–≤–∞—Ä—Ç–∏—Ä–∞."

    if state_data.get("live_adress_conf") is None:
        photo_path = "static/live_adress_example.png"
        text = f"{title}\n{example}"
    else:
        photo_path = "static/live_adress.png"
        text_key = _.get_text("adress_residence_permit", lang)
        text = text_key if not text_key.startswith("[Missing:") else title

    await state.update_data(waiting_data="live_adress")

    try:
        photo = FSInputFile(photo_path)
        await call.message.answer_photo(photo=photo, caption=text)
    except Exception:
        await call.message.answer(text)

    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ LiveAdress.adress ‚Äî –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@live_adress_router.message(LiveAdress.adress)
async def handle_live_adress(message: Message, state: FSMContext):
    state_data = await state.get_data()
    lang = state_data.get("language", "ru")
    waiting_data = state_data.get("waiting_data")
    session_id = state_data.get("session_id")

    # ‚îÄ‚îÄ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    raw = (message.text or "").strip()
    value = re.sub(r"[ \t]+", " ", raw)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    value = re.sub(r"\s*,\s*", ", ", value).strip(", ")  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–µ–Ω
    if len(value.split(",")) == 1 and value:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
        pass
    else:
        parts = [p for p in value.split(",") if p]  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if len(parts) < 2:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Ç–æ —ç—Ç–æ –Ω–µ–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            hint = _.get_text("live_adress.example", lang)
            if hint.startswith("[Missing:"):
                hint = "–§–æ—Ä–º–∞—Ç: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–≤–∞—Ä—Ç–∏—Ä–∞."
            await message.answer("–ê–¥—Ä–µ—Å –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø–æ–ª–Ω—ã–º. " + hint)
            return

    # ‚îÄ‚îÄ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (dot-path –ø–æ–¥–¥–µ—Ä–∂–∞–Ω) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if waiting_data and "." in waiting_data:
        pkey, skey = waiting_data.split(".", 1)
        container = dict(state_data.get(pkey) or {})
        container[skey] = value
        await state.update_data({pkey: container})
        data_manager.save_user_data(message.from_user.id, session_id, {pkey: container})
    else:
        key = waiting_data or "live_adress"
        await state.update_data({key: value})
        data_manager.save_user_data(message.from_user.id, session_id, {key: value})

    # ‚îÄ‚îÄ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞ (–¢–û–õ–¨–ö–û –≤–ø–µ—Ä—ë–¥) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    state_data = await state.get_data()
    next_states = list(state_data.get("next_states") or [])
    from_action = state_data.get("from_action")

    print(">>> live_adress next_states:", next_states, "from_action:", from_action)

    # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–µ–π—Ç–∞ –≤ –≥–æ–ª–æ–≤–µ –æ—á–µ—Ä–µ–¥–∏
    try:
        from states.components.live_adress import LiveAdress as _LA
        while next_states and next_states[0] == _LA.adress:
            next_states.pop(0)
    except Exception:
        pass

    # –±–æ–ª—å—à–µ –ù–ò–ö–ê–ö–û–ì–û len(next_states) == 1 -> from_action!
    next_state = next_states[0] if next_states else None
    rest = next_states[1:] if len(next_states) > 1 else []
    await state.update_data(next_states=rest)

    if next_state is None:
        # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –≤–µ–¥—ë–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(waiting_data="phone_number")
        await state.set_state(PhoneNumberStates.phone_number_input)
        prompt = _.get_text("phone_number.ask", lang)
        if prompt.startswith("[Missing:"):
            prompt = "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX."
        await message.answer(prompt)
        return

    if next_state == PhoneNumberStates.phone_number_input:
        await state.update_data(waiting_data="phone_number")
        await state.set_state(next_state)
        prompt = _.get_text("phone_number.ask", lang)
        if prompt.startswith("[Missing:"):
            prompt = "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX."
        await message.answer(prompt)
    else:
        await state.set_state(next_state)



# –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–º–ø–æ—Ä—Ç–æ–º –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
handle_live_adress_input = handle_live_adress
