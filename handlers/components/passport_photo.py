from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from data_manager import SecureDataManager
from ocr.service import PassbotOcrService, OcrError
from localization import _
from states.components.passport_photo import PassportPhotoStates
from states.stamp_transfer import Stamp_transfer
from states.components.live_adress import LiveAdress
from states.components.phone_number import PhoneNumberStates

passport_photo_router = Router()
data_manager = SecureDataManager()
ocr_service = PassbotOcrService()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _kb_old_preview() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="old_ok")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π", callback_data="old_edit")],
        [InlineKeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="old_retry")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤–æ–º—É –ø–∞—Å–ø–æ—Ä—Ç—É (–ø–æ —Ñ–æ—Ç–æ)", callback_data="goto_new_by_photo")],
        [InlineKeyboardButton(text="‚å®Ô∏è –ù–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç ‚Äî –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="goto_new_manual")],
    ])


def _kb_new_preview() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="new_ok")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π", callback_data="new_edit")],
        [InlineKeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="new_retry")],
    ])


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.callback_query(F.data == "passport_old_photo_start")
async def start_old(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ –°–¢–ê–†–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    state_data = await state.get_data()
    lang = state_data.get("language")
    await state.set_state(PassportPhotoStates.waiting_old_passport_photo)
    title = _.get_text("ocr.passport.send_photo.title", lang)
    hint = _.get_text("ocr.passport.send_photo.hint", lang)
    await callback.message.edit_text(f"{title}\n\n{hint}")


@passport_photo_router.callback_query(F.data == "passport_new_photo_start")
async def start_new(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ –ù–û–í–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    state_data = await state.get_data()
    lang = state_data.get("language")
    await state.set_state(PassportPhotoStates.waiting_new_passport_photo)
    title = _.get_text("ocr.passport.send_photo.title", lang)
    hint = _.get_text("ocr.passport.send_photo.hint", lang)
    await callback.message.edit_text(f"{title}\n\n{hint}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–∏—ë–º —Ñ–æ—Ç–æ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.message(PassportPhotoStates.waiting_old_passport_photo, F.photo)
@passport_photo_router.message(PassportPhotoStates.waiting_new_passport_photo, F.photo)
async def on_passport_photo(message: Message, state: FSMContext):
    state_data = await state.get_data()
    lang = state_data.get("language")
    session_id = state_data.get("session_id")
    is_old = (await state.get_state()) == PassportPhotoStates.waiting_old_passport_photo.state

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    f = await message.bot.get_file(message.photo[-1].file_id)
    file_bytes = await message.bot.download_file(f.file_path)
    img_path = data_manager.save_file(
        message.from_user.id,
        session_id,
        file_bytes.read(),
        filename=("old_passport.jpg" if is_old else "new_passport.jpg"),
    )

    note_msg = await message.answer(_.get_text("ocr.passport.progress", lang))

    try:
        result = await ocr_service.process_passport(img_path)

        # –ö—É–¥–∞ –∫–ª–∞–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        key = "old_passport_data" if is_old else "passport_data"
        await state.update_data(**{key: result.passport_data})
        data_manager.save_user_data(message.from_user.id, session_id, {key: result.passport_data})

        # –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        p = result.passport_data
        preview_tpl = _.get_text("ocr.passport.success.preview", lang)
        preview = preview_tpl.format(
            full_name=p.get("full_name", "‚Äî"),
            birth_date=p.get("birth_date", "‚Äî"),
            citizenship=p.get("citizenship", "‚Äî"),
            doc_id=p.get("passport_serial_number", p.get("doc_id", "‚Äî")),
            issued_by=p.get("passport_issue_place", "‚Äî"),
            issue_date=p.get("passport_issue_date", "‚Äî"),
            expiry_date=p.get("passport_expiry_date", "‚Äî"),
        )

        title = _.get_text("ocr.passport.success.title", lang)
        kb = _kb_old_preview() if is_old else _kb_new_preview()
        await note_msg.edit_text(f"{title}\n\n{preview}", reply_markup=kb)

    except OcrError as e:
        fail_title = _.get_text("ocr.passport.fail.title", lang)
        fail_hint = _.get_text("ocr.passport.fail.hint", lang)
        await note_msg.edit_text(f"{fail_title}\n\n{fail_hint}\n\n{e.user_message}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –°–¢–ê–†–´–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.callback_query(F.data == "old_retry")
async def old_retry(cb: CallbackQuery, state: FSMContext):
    await state.set_state(PassportPhotoStates.waiting_old_passport_photo)
    await cb.message.edit_text("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –°–¢–ê–†–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞.")

@passport_photo_router.callback_query(F.data == "old_edit")
async def old_edit(cb: CallbackQuery, state: FSMContext):
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–≤–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä—É—á–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª–µ–π
    await cb.message.edit_text("‚úèÔ∏è –ö–∞–∫–æ–µ –ø–æ–ª–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

@passport_photo_router.callback_query(F.data == "old_ok")
async def old_ok(cb: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å—Ç–∞—Ä—ã–π –ø–∞—Å–ø–æ—Ä—Ç ‚Üí –ø–µ—Ä–µ–Ω–æ—Å–∏–º passport_data -> old_passport_data (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ù–û–í–´–ô –ø–∞—Å–ø–æ—Ä—Ç (–ø–æ —Ñ–æ—Ç–æ/–≤—Ä—É—á–Ω—É—é), –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ '–∫–µ–º –≤—ã–¥–∞–Ω'.
    """
    data = await state.get_data()
    session_id = data.get("session_id")
    lang = data.get("language")

    # –µ—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –≤ 'passport_data' ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ old_
    pd = data.get("passport_data") or data.get("old_passport_data") or {}
    await state.update_data(old_passport_data=pd, passport_data={})
    data_manager.save_user_data(cb.from_user.id, session_id, {"old_passport_data": pd})

    # –≥–æ—Ç–æ–≤–∏–º —à–∞–≥ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
    await state.update_data(from_action=Stamp_transfer.after_new_passport,
                            passport_title="stamp_transfer_passport_new_title",
                            next_states=[LiveAdress.adress, PhoneNumberStates.phone_number_input])

    await cb.message.edit_text(
        _.get_text("stamp_transfer_start_new_passport.title", lang) + "\n\n" +
        _.get_text("stamp_transfer_start_new_passport.description", lang)
    )
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚Äî –µ—ë –¥–∞—ë—Ç —Ç–≤–æ–π stamp_transfer.py
    # –æ—Ç—Å—é–¥–∞ –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await start_new(cb, state)



@passport_photo_router.callback_query(F.data == "goto_new_by_photo")
async def goto_new_by_photo(cb: CallbackQuery, state: FSMContext):
    await start_new(cb, state)

@passport_photo_router.callback_query(F.data == "goto_new_manual")
async def goto_new_manual(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤—Ä—É—á–Ω—É—é (—Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º).")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –ù–û–í–´–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.callback_query(F.data == "new_retry")
async def new_retry(cb: CallbackQuery, state: FSMContext):
    await state.set_state(PassportPhotoStates.waiting_new_passport_photo)
    await cb.message.edit_text("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –ù–û–í–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞.")

@passport_photo_router.callback_query(F.data == "new_edit")
async def new_edit(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("‚úèÔ∏è –ö–∞–∫–æ–µ –ø–æ–ª–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

@passport_photo_router.callback_query(F.data == "new_ok")
async def new_ok(cb: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –Ω–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    (–æ–±—ã—á–Ω–æ: –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞, –∑–∞—Ç–µ–º –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).
    """
    data = await state.get_data()
    lang = data.get("language")
    # –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é stamp_transfer
    from_action = data.get("from_action") or Stamp_transfer.after_new_passport
    # —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –ø–æ—Å–ª–µ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ (–º—ã –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ä–∞–Ω–µ–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞)
    next_states = data.get("next_states") or [LiveAdress.adress, PhoneNumberStates.phone_number_input]

    # 1) —Å—Ç–∞–≤–∏–º "–∫–æ—Ä–Ω–µ–≤–æ–µ" —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ—Å–ª–µ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
    await state.set_state(from_action)
    await cb.message.edit_text("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.")

    # –û–±—Ä–µ–∂–µ–º –æ—á–µ—Ä–µ–¥—å: —É–¥–∞–ª–∏–º –ø–µ—Ä–≤—ã–π —à–∞–≥, —á—Ç–æ–±—ã –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –æ—Å—Ç–∞–ª—Å—è self
    first_next = next_states[0] if next_states else None
    rest = next_states[1:] if next_states else []
    await state.update_data(next_states=rest)

    if first_next:
        await state.update_data(waiting_data="live_adress")
        await state.set_state(first_next)

        prompt = _.get_text("live_adress.ask", lang)
        if prompt.startswith("[Missing:"):
            prompt = "üìù –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –†–§ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–≤–∞—Ä—Ç–∏—Ä–∞."
        await cb.message.answer(prompt)
