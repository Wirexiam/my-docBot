from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards.passport_preview import old_preview_kb, new_preview_kb
from data_manager import SecureDataManager
from ocr.service import PassbotOcrService, OcrError
from localization import _
from states.components.passport_photo import PassportPhotoStates
from states.stamp_transfer import Stamp_transfer
from states.components.live_adress import LiveAdress
from states.components.phone_number import PhoneNumberStates

passport_photo_router = Router()
data_manager = SecureDataManager()
ocr_service = PassbotOcrService()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.callback_query(F.data == "passport_old_photo_start")
async def start_old(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ –°–¢–ê–†–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    state_data = await state.get_data()
    lang = state_data.get("language")
    await state.set_state(PassportPhotoStates.waiting_old_passport_photo)
    title = _.get_text("ocr.passport.send_photo.title", lang)
    hint = _.get_text("ocr.passport.send_photo.hint", lang)
    await callback.message.edit_text(f"{title}\n\n{hint}")


@passport_photo_router.callback_query(F.data == "passport_new_photo_start")
async def start_new(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ –ù–û–í–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    state_data = await state.get_data()
    lang = state_data.get("language")
    await state.set_state(PassportPhotoStates.waiting_new_passport_photo)
    title = _.get_text("ocr.passport.send_photo.title", lang)
    hint = _.get_text("ocr.passport.send_photo.hint", lang)
    await callback.message.edit_text(f"{title}\n\n{hint}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–∏—ë–º —Ñ–æ—Ç–æ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.message(PassportPhotoStates.waiting_old_passport_photo, F.photo)
@passport_photo_router.message(PassportPhotoStates.waiting_new_passport_photo, F.photo)
async def on_passport_photo(message: Message, state: FSMContext):
    state_data = await state.get_data()
    lang = state_data.get("language")
    session_id = state_data.get("session_id")
    is_old = (await state.get_state()) == PassportPhotoStates.waiting_old_passport_photo.state

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    f = await message.bot.get_file(message.photo[-1].file_id)
    file_bytes = await message.bot.download_file(f.file_path)
    img_path = data_manager.save_file(
        message.from_user.id,
        session_id,
        file_bytes.read(),
        filename=("old_passport.jpg" if is_old else "new_passport.jpg"),
    )

    note_msg = await message.answer(_.get_text("ocr.passport.progress", lang))

    try:
        result = await ocr_service.process_passport(img_path)

        # ‚îÄ‚îÄ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–ï–ô –û–¢ OCR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        p = dict(result.passport_data)  # –∫–æ–ø–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫
        aliases = {
            "doc_id": "passport_serial_number",
            "issued_by": "passport_issue_place",
            "issue_date": "passport_issue_date",
            "expiry_date": "passport_expiry_date",
            "fullName": "full_name",
            "birthDate": "birth_date",
        }
        for src, dst in aliases.items():
            if src in p and dst not in p:
                p[dst] = p.pop(src)

        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–∞—Å–ø–æ—Ä—Ç–∞
        required_fields = [
            "full_name",
            "birth_date",
            "citizenship",
            "passport_serial_number",
            "passport_issue_date",
            "passport_expiry_date",
            "passport_issue_place",
        ]
        for f in required_fields:
            p.setdefault(f, "")  # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ OCR –µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª

        # —É–±–µ—Ä—ë–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –ª–∏—à–Ω–∏–µ –∫–Ω–æ–ø–∫–∏/–ø–æ–ª—è
        p = {k: v for k, v in p.items() if isinstance(v, str) and v.strip()} | {f: p.get(f, "") for f in
                                                                                required_fields}

        # ‚îÄ‚îÄ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ state –ø–æ–¥ –Ω—É–∂–Ω—ã–º –∫–ª—é—á–æ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        key = "old_passport_data" if is_old else "passport_data"
        await state.update_data(**{key: p})
        data_manager.save_user_data(message.from_user.id, session_id, {key: p})

        # ‚îÄ‚îÄ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        preview_tpl = _.get_text("ocr.passport.success.preview", lang)
        preview = preview_tpl.format(
            full_name=p.get("full_name", "‚Äî"),
            birth_date=p.get("birth_date", "‚Äî"),
            citizenship=p.get("citizenship", "‚Äî"),
            doc_id=p.get("passport_serial_number", p.get("doc_id", "‚Äî")),
            issued_by=p.get("passport_issue_place", "‚Äî"),
            issue_date=p.get("passport_issue_date", "‚Äî"),
            expiry_date=p.get("passport_expiry_date", "‚Äî"),
        )

        title = _.get_text("ocr.passport.success.title", lang)
        kb = old_preview_kb() if is_old else new_preview_kb()
        await note_msg.edit_text(f"{title}\n\n{preview}", reply_markup=kb)


    except OcrError as e:
        fail_title = _.get_text("ocr.passport.fail.title", lang)
        fail_hint = _.get_text("ocr.passport.fail.hint", lang)
        await note_msg.edit_text(f"{fail_title}\n\n{fail_hint}\n\n{e.user_message}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –°–¢–ê–†–´–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.callback_query(F.data == "old_retry")
async def old_retry(cb: CallbackQuery, state: FSMContext):
    await state.set_state(PassportPhotoStates.waiting_old_passport_photo)
    await cb.message.edit_text("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –°–¢–ê–†–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞.")


@passport_photo_router.callback_query(F.data == "old_ok")
async def old_ok(cb: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å—Ç–∞—Ä—ã–π –ø–∞—Å–ø–æ—Ä—Ç ‚Üí –ø–µ—Ä–µ–Ω–æ—Å–∏–º passport_data -> old_passport_data (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ù–û–í–´–ô –ø–∞—Å–ø–æ—Ä—Ç (–ø–æ —Ñ–æ—Ç–æ/–≤—Ä—É—á–Ω—É—é), –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ '–∫–µ–º –≤—ã–¥–∞–Ω'.
    """
    data = await state.get_data()
    session_id = data.get("session_id")
    lang = data.get("language")

    # –µ—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –≤ 'passport_data' ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ old_
    pd = data.get("passport_data") or data.get("old_passport_data") or {}
    await state.update_data(old_passport_data=pd, passport_data={})
    data_manager.save_user_data(cb.from_user.id, session_id, {"old_passport_data": pd})

    # –≥–æ—Ç–æ–≤–∏–º —à–∞–≥ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
    await state.update_data(from_action=Stamp_transfer.after_new_passport,
                            passport_title="stamp_transfer_passport_new_title",
                            next_states=[LiveAdress.adress, PhoneNumberStates.phone_number_input])

    await cb.message.edit_text(
        _.get_text("stamp_transfer_start_new_passport.title", lang) + "\n\n" +
        _.get_text("stamp_transfer_start_new_passport.description", lang)
    )
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚Äî –µ—ë –¥–∞—ë—Ç —Ç–≤–æ–π stamp_transfer.py
    # –æ—Ç—Å—é–¥–∞ –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await start_new(cb, state)



@passport_photo_router.callback_query(F.data == "goto_new_by_photo")
async def goto_new_by_photo(cb: CallbackQuery, state: FSMContext):
    await start_new(cb, state)

@passport_photo_router.callback_query(F.data == "goto_new_manual")
async def goto_new_manual(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤—Ä—É—á–Ω—É—é (—Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º).")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –ù–û–í–´–ô ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@passport_photo_router.callback_query(F.data == "new_retry")
async def new_retry(cb: CallbackQuery, state: FSMContext):
    await state.set_state(PassportPhotoStates.waiting_new_passport_photo)
    await cb.message.edit_text("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –ù–û–í–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞.")


@passport_photo_router.callback_query(F.data == "new_ok")
async def new_ok(cb: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ù–û–í–´–ô –ø–∞—Å–ø–æ—Ä—Ç ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ú–ò–ù–ò-–°–í–û–î–ö–£ (—Ç–æ–ª—å–∫–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ),
    —Å –∫–Ω–æ–ø–∫–∞–º–∏: –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–¥—Ä–µ—Å—É/—Ç–µ–ª–µ—Ñ–æ–Ω—É –ò–õ–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    """
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    data = await state.get_data()
    lang = data.get("language")

    from_action = data.get("from_action") or Stamp_transfer.after_new_passport
    await state.set_state(from_action)

    sd = await state.get_data()
    new_pd = sd.get("passport_data") or {}
    old_pd = sd.get("old_passport_data") or {}

    def _val(d, k, default="‚Äî"):
        v = (d.get(k) or "").strip()
        return v if v else default

    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        f"üë§ –§–ò–û: {_val(new_pd, 'full_name')}\n"
        f"üóì –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {_val(new_pd, 'birth_date')}\n"
        f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {_val(new_pd, 'citizenship')}\n"
        f"üìÑ –ù–æ–º–µ—Ä: {_val(new_pd, 'passport_serial_number')}\n"
        f"üè¢ –ö–µ–º –≤—ã–¥–∞–Ω / –¥–∞—Ç–∞: {_val(new_pd, 'passport_issue_place')} / {_val(new_pd, 'passport_issue_date')}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {_val(new_pd, 'passport_expiry_date')}\n\n"
        f"üìÑ –°—Ç–∞—Ä—ã–π –ø–∞—Å–ø–æ—Ä—Ç: {_val(old_pd, 'passport_serial_number')} "
        f"({_val(old_pd, 'passport_issue_place')} / {_val(old_pd, 'passport_issue_date')})"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–¥—Ä–µ—Å—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="goto_adress_phone")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="new_edit")],
        [InlineKeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="new_retry")],
    ])

    await cb.message.edit_text(text, reply_markup=kb)


@passport_photo_router.callback_query(F.data.in_({"old_edit", "new_edit"}))
async def start_edit_bridge(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if cb.data == "old_edit":
        # –±—É–¥–µ–º —Ä–µ–¥–∞—á–∏—Ç—å –°–¢–ê–†–´–ô –ø–∞—Å–ø–æ—Ä—Ç ‚Üí –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–≤—å—é —Å—Ç–∞—Ä–æ–≥–æ
        await state.update_data(
            change_data_from_check="old_preview",                 # —Å—é–¥–∞ –≤–µ—Ä–Ω—ë–º—Å—è ¬´–Ω–∞–∑–∞–¥¬ª –∏–∑ –º–µ–Ω—é –ø—Ä–∞–≤–∫–∏
            from_action=Stamp_transfer.after_old_passport,        # —Å—é–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
            return_after_edit="old_preview",                      # —Ñ–ª–∞–≥: –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Å—Ç–∞—Ä–æ–≥–æ
        )
    else:
        # –±—É–¥–µ–º —Ä–µ–¥–∞—á–∏—Ç—å –ù–û–í–´–ô –ø–∞—Å–ø–æ—Ä—Ç ‚Üí –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Å–≤–æ–¥–∫–µ
        await state.update_data(
            change_data_from_check="stamp_transfer_after_new_passport",
            from_action=Stamp_transfer.after_new_passport,
            return_after_edit="stamp_transfer_after_new_passport",  # —Ñ–ª–∞–≥: –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
        )

    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    from handlers.components.changing_data import handle_change_data

    # –ø–æ–¥–º–µ–Ω—è–µ–º data, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∞–≤–∫–∏
    fake_cb = cb.model_copy(update={"data": "change_data_dummy"})
    await handle_change_data(fake_cb, state)

