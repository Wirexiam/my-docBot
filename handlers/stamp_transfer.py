from pprint import pprint
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from pdf_generator.gen_pdf import create_user_doc
from states.stamp_transfer import Stamp_transfer
from states.components.passport_manual import PassportManualStates
from states.components.live_adress import LiveAdress
from states.components.phone_number import PhoneNumberStates
from keyboards.stamp_transfer import (
    get_stamp_transfer_check_data_before_gen,
    get_waiting_confirm_stamp_transfer_start_keyboard,
    stamp_transfer_passport_start_keyboard,
    passport_start_keyboard,
)
# –∑–∞–º–µ–Ω–∏–ª –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è '_' –Ω–∞ —è–≤–Ω–æ–µ i18n
from localization import _ as i18n
from data_manager import SecureDataManager

stamp_transfer_router = Router()
data_manager = SecureDataManager()


@stamp_transfer_router.callback_query(F.data == "doc_stamp_restoration")
async def handle_stamp_restoration(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ç–∞–º–ø–∞"""
    await state.set_state(Stamp_transfer.waiting_confirm_stamp_transfer_start)
    state_data = await state.get_data()
    lang = state_data.get("language")
    await state.update_data(from_action="stamp_transfer_after_mvd")

    text = (
        f"{i18n.get_text('stamp_transfer.title', lang)}\n"
        f"{i18n.get_text('stamp_transfer.description', lang)}\n"
        f"{i18n.get_text('stamp_transfer.documents_to_prepare', lang)}"
    )
    await callback.message.edit_text(
        text=text,
        reply_markup=get_waiting_confirm_stamp_transfer_start_keyboard(lang),
    )


@stamp_transfer_router.callback_query(F.data == "stamp_transfer_after_mvd")
async def handle_stamp_transfer_after_mvd(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ú–í–î: –≥–æ—Ç–æ–≤–∏–º —à–∞–≥ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    await state.set_state(Stamp_transfer.after_select_mvd)
    state_data = await state.get_data()
    lang = state_data.get("language")
    mvd_adress = state_data.get("mvd_adress")
    session_id = state_data.get("session_id")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –ú–í–î
    data_manager.save_user_data(callback.from_user.id, session_id, {"mvd_adress": mvd_adress})

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å—Ç–∞—Ä—ã–π –ø–∞—Å–ø–æ—Ä—Ç
    await state.update_data(from_action=Stamp_transfer.after_old_passport)
    await state.update_data(passport_title="stamp_transfer_passport_old_title")

    text = (
        f"{i18n.get_text('stamp_transfer_passport_start.title', lang)}\n"
        f"{i18n.get_text('stamp_transfer_passport_start.description', lang)}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º OCR –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    await callback.message.edit_text(
        text=text,
        reply_markup=passport_start_keyboard("old", lang),
    )


@stamp_transfer_router.callback_query(F.data == "passport_old_manual_start")
async def start_old_manual(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    await state.set_state(Stamp_transfer.after_old_passport)
    await state.update_data(waiting_data="old_passport_data.full_name")
    lang = (await state.get_data()).get("language")
    await cb.message.edit_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞:")


@stamp_transfer_router.callback_query(F.data == "passport_new_manual_start")
async def start_new_manual(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    await state.set_state(Stamp_transfer.after_new_passport)
    await state.update_data(waiting_data="passport_data.full_name")
    lang = (await state.get_data()).get("language")
    await cb.message.edit_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞:")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@stamp_transfer_router.message(Stamp_transfer.after_old_passport)
async def handle_old_passport_data(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª–µ–π –°–¢–ê–†–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞.
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π:
      full_name -> birth_date -> citizenship -> passport_serial_number ->
      passport_issue_place -> passport_issue_date -> passport_expiry_date
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è dot-path "old_passport_data.<field>" –≤ waiting_data.
    """
    from keyboards.passport_preview import old_preview_kb

    state_data = await state.get_data()
    lang = state_data.get("language")
    session_id = state_data.get("session_id")
    waiting_data = state_data.get("waiting_data")
    return_after_edit = state_data.get("return_after_edit")

    # –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not waiting_data:
        return

    # –µ—Å–ª–∏ —ç—Ç–æ dot-path –¥–ª—è old_passport_data.*
    if waiting_data.startswith("old_passport_data."):
        _, field = waiting_data.split(".", 1)
        old_pd = dict(state_data.get("old_passport_data") or {})
        old_pd[field] = (message.text or "").strip()
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await state.update_data(old_passport_data=old_pd, waiting_data=None)
        data_manager.save_user_data(message.from_user.id, session_id, {"old_passport_data": old_pd})
        # –æ–±–Ω–æ–≤–∏–º snapshot
        state_data = await state.get_data()
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–ª–µ
        await state.update_data({waiting_data: (message.text or "").strip(), "waiting_data": None})
        data_manager.save_user_data(message.from_user.id, session_id, {waiting_data: (message.text or "").strip()})
        state_data = await state.get_data()

    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–∞–≤–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –≤—ã—Ö–æ–¥–∏–º
    if return_after_edit == "old_preview":
        p = state_data.get("old_passport_data") or {}
        title = i18n.get_text("ocr.passport.success.title", lang)
        preview_tpl = i18n.get_text("ocr.passport.success.preview", lang)
        preview = preview_tpl.format(
            full_name=p.get("full_name", "‚Äî"),
            birth_date=p.get("birth_date", "‚Äî"),
            citizenship=p.get("citizenship", "‚Äî"),
            doc_id=p.get("passport_serial_number", p.get("doc_id", "‚Äî")),
            issued_by=p.get("passport_issue_place", "‚Äî"),
            issue_date=p.get("passport_issue_date", "‚Äî"),
            expiry_date=p.get("passport_expiry_date", "‚Äî"),
        )
        await message.answer(f"{title}\n\n{preview}", reply_markup=old_preview_kb())
        await state.update_data(return_after_edit=None)
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, —Å–ø—Ä–æ—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–π
    seq = [
        "full_name",
        "birth_date",
        "citizenship",
        "passport_serial_number",
        "passport_issue_place",
        "passport_issue_date",
        "passport_expiry_date",
    ]
    old_pd = state_data.get("old_passport_data") or {}
    # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
    next_field = None
    for f in seq:
        if not (old_pd.get(f) and str(old_pd.get(f)).strip()):
            next_field = f
            break

    # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º –µ–≥–æ
    if next_field:
        prompts = {
            "full_name": "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞). –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            "birth_date": "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì). –ü—Ä–∏–º–µ—Ä: 20.01.1985",
            "citizenship": "üåç –í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã). –ü—Ä–∏–º–µ—Ä: –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            "passport_serial_number": "üìÑ –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–ø—Ä–∏–º–µ—Ä: AA0960090)",
            "passport_issue_place": "üè¢ –í–≤–µ–¥–∏—Ç–µ –∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç (–ø—Ä–∏–º–µ—Ä: –ì–£ –ú–í–î –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞, –¢–∞—à–∫–µ–Ω—Ç –≥.)",
            "passport_issue_date": "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç –î–î.MM.–ì–ì–ì–ì). –ü—Ä–∏–º–µ—Ä: 03.03.2013",
            "passport_expiry_date": "‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç –î–î.MM.–ì–ì–ì–ì). –ü—Ä–∏–º–µ—Ä: 02.03.2023",
        }
        await state.update_data(waiting_data=f"old_passport_data.{next_field}")
        await message.answer(prompts[next_field])
        return

    # –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –º–æ—Å—Ç –∫ –Ω–æ–≤–æ–º—É –ø–∞—Å–ø–æ—Ä—Ç—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    current_pd = state_data.get("passport_data") or {}
    existing_old = state_data.get("old_passport_data") or {}
    if not existing_old and current_pd:
        await state.update_data(old_passport_data=current_pd, passport_data={})
        data_manager.save_user_data(message.from_user.id, session_id, {"old_passport_data": current_pd})

    await state.update_data(
        from_action=Stamp_transfer.after_new_passport,
        passport_title="stamp_transfer_passport_new_title",
        next_states=[LiveAdress.adress, PhoneNumberStates.phone_number_input],
    )

    text = (
        f"{i18n.get_text('stamp_transfer_start_new_passport.title', lang)}\n\n"
        f"{i18n.get_text('stamp_transfer_start_new_passport.description', lang)}"
    )
    await message.answer(text=text, reply_markup=passport_start_keyboard("new", lang))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@stamp_transfer_router.message(Stamp_transfer.after_new_passport)
async def handle_new_passport_data(message: Message, state: FSMContext):
    """
    –ü–æ—à–∞–≥–æ–≤—ã–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–ª–µ–π –ù–û–í–û–ì–û –ø–∞—Å–ø–æ—Ä—Ç–∞:
    full_name -> birth_date -> citizenship -> passport_serial_number ->
    passport_issue_place -> passport_issue_date -> passport_expiry_date
    –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –∞–¥—Ä–µ—Å—É/—Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    state_data = await state.get_data()
    waiting_data = state_data.get("waiting_data")
    lang = state_data.get("language")
    session_id = state_data.get("session_id")

    # –ï—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not waiting_data:
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ dot-path)
    if "." in waiting_data:
        primary_key, secondary_key = waiting_data.split(".", 1)
        primary_key_data = dict(state_data.get(primary_key) or {})
        primary_key_data[secondary_key] = (message.text or "").strip()
        await state.update_data({primary_key: primary_key_data, "waiting_data": None})
        data_manager.save_user_data(message.from_user.id, session_id, {primary_key: primary_key_data})
    else:
        value = (message.text or "").strip()
        await state.update_data({waiting_data: value, "waiting_data": None})
        data_manager.save_user_data(message.from_user.id, session_id, {waiting_data: value})

    # –û–±–Ω–æ–≤–∏–º snapshot
    state_data = await state.get_data()

    # –ú–∞—Ä–∫–µ—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫, –∫–∞–∫ –µ—Å—Ç—å)
    await state.update_data(
        from_action=Stamp_transfer.after_new_passport,
        change_data_from_check="stamp_transfer_after_new_passport",
    )
    state_data = await state.get_data()
    is_edit = state_data.get("return_after_edit") == "stamp_transfer_after_new_passport"

    # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –ø—Ä–∞–≤–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-—Å–≤–æ–¥–∫—É (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    if is_edit:
        new_pd = state_data.get("passport_data") or {}
        old_pd = state_data.get("old_passport_data") or {}

        def _val(d: dict, k: str, default: str = "‚Äî") -> str:
            v = (d.get(k) or "").strip() if isinstance(d.get(k), str) else d.get(k) or ""
            return v if v else default

        text = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            f"üë§ –§–ò–û: {_val(new_pd, 'full_name')}\n"
            f"üóì –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {_val(new_pd, 'birth_date')}\n"
            f"üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {_val(new_pd, 'citizenship')}\n"
            f"üìÑ –ù–æ–º–µ—Ä: {_val(new_pd, 'passport_serial_number')}\n"
            f"üè¢ –ö–µ–º –≤—ã–¥–∞–Ω / –¥–∞—Ç–∞: {_val(new_pd, 'passport_issue_place')} / {_val(new_pd, 'passport_issue_date')}\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {_val(new_pd, 'passport_expiry_date')}\n\n"
            f"üìÑ –°—Ç–∞—Ä—ã–π –ø–∞—Å–ø–æ—Ä—Ç: {_val(old_pd, 'passport_serial_number')} "
            f"({_val(old_pd, 'passport_issue_place')} / {_val(old_pd, 'passport_issue_date')})"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–¥—Ä–µ—Å—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="goto_adress_phone")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="new_edit")],
            [InlineKeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="new_retry")],
        ])

        await message.answer(text, reply_markup=kb)
        await state.update_data(return_after_edit=None)
        return

    # –ï—Å–ª–∏ –º—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ–º/–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è passport_data ‚Äî —Å–ø—Ä–æ—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π –ø–æ–ª–µ
    seq = [
        "full_name",
        "birth_date",
        "citizenship",
        "passport_serial_number",
        "passport_issue_place",
        "passport_issue_date",
        "passport_expiry_date",
    ]
    passport_pd = state_data.get("passport_data") or {}
    next_field = None
    for f in seq:
        if not (passport_pd.get(f) and str(passport_pd.get(f)).strip()):
            next_field = f
            break

    if next_field:
        prompts = {
            "full_name": "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)\n–ü—Ä–∏–º–µ—Ä: –ê–±–¥—É–ª–ª–∞–µ–≤ –ñ–∞—Ö–æ–Ω–≥–∏—Ä –ù–æ–¥–∏—Ä–æ–≤–∏—á",
            "birth_date": "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.MM.–ì–ì–ì–ì). –ü—Ä–∏–º–µ—Ä: 20.01.1962",
            "citizenship": "üåç –í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ. –ü—Ä–∏–º–µ—Ä: –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
            "passport_serial_number": "üìÑ –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–ø—Ä–∏–º–µ—Ä: AA0960090)",
            "passport_issue_place": "üè¢ –í–≤–µ–¥–∏—Ç–µ –∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç (–ø—Ä–∏–º–µ—Ä: –ì–£ –ú–í–î –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞, –¢–∞—à–∫–µ–Ω—Ç –≥.)",
            "passport_issue_date": "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–î–î.MM.–ì–ì–ì–ì). –ü—Ä–∏–º–µ—Ä: 03.03.2013",
            "passport_expiry_date": "‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–î–î.MM.–ì–ì–ì–ì). –ü—Ä–∏–º–µ—Ä: 02.03.2023",
        }
        await state.update_data(waiting_data=f"passport_data.{next_field}")
        await message.answer(prompts[next_field])
        return

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    state_data = await state.get_data()
    if not state_data.get("live_adress"):
        await state.update_data(waiting_data="live_adress")
        await state.set_state(LiveAdress.adress)
        prompt = i18n.get_text("live_adress.ask", lang)
        if prompt.startswith("[Missing:"):
            prompt = "üìù –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –†–§ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–≤–∞—Ä—Ç–∏—Ä–∞."
        await message.answer(prompt)
        return

    if not state_data.get("phone_number"):
        await state.update_data(waiting_data="phone_number")
        await state.set_state(PhoneNumberStates.phone_number_input)
        prompt = i18n.get_text("phone_number.ask", lang)
        if prompt.startswith("[Missing:"):
            prompt = "‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: 79809008090"
        await message.answer(prompt)
        return

    # –í—Å—ë –µ—Å—Ç—å ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    new_passport = state_data.get("passport_data") or {}
    old_passport = state_data.get("old_passport_data") or {}

    data_to_view = {
        "name": new_passport.get("full_name", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "new_passport_number": new_passport.get("passport_serial_number", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "old_passport_number": old_passport.get("passport_serial_number", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "new_passport_issue_place": new_passport.get("passport_issue_place", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "old_passport_issue_place": old_passport.get("passport_issue_place", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "new_passport_issue_date": new_passport.get("passport_issue_date", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "old_passport_issue_date": old_passport.get("passport_issue_date", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "new_passport_expiry_date": new_passport.get("passport_expiry_date", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "old_passport_expiry_date": old_passport.get("passport_expiry_date", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "live_adress": state_data.get("live_adress", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "phone_number": state_data.get("phone_number", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
        "mvd_adress": state_data.get("mvd_adress", "–ù–µ –Ω–∞–π–¥–µ–Ω"),
    }

    text = (
        f"{i18n.get_text('stamp_check_datas_info.title', lang)}\n\n"
        f"{i18n.get_text('stamp_check_datas_info.full_name', lang)}{data_to_view['name']}\n"
        f"{i18n.get_text('stamp_check_datas_info.new_passport', lang)}{data_to_view['new_passport_number']}"
        f"{i18n.get_text('stamp_check_datas_info.issue_date', lang)}{data_to_view['new_passport_issue_date']} {data_to_view['new_passport_issue_place']}"
        f"{i18n.get_text('stamp_check_datas_info.expiry_date', lang)}{data_to_view['new_passport_expiry_date']}\n"
        f"{i18n.get_text('stamp_check_datas_info.old_passport', lang)}{data_to_view['old_passport_number']}"
        f"{i18n.get_text('stamp_check_datas_info.issue_date', lang)}{data_to_view['old_passport_issue_date']} {data_to_view['old_passport_issue_place']}"
        f"{i18n.get_text('stamp_check_datas_info.expiry_date', lang)}{data_to_view['old_passport_expiry_date']}\n"
        f"{i18n.get_text('stamp_check_datas_info.stamp_in', lang)}\n"
        f"{i18n.get_text('stamp_check_datas_info.adress', lang)}{data_to_view['live_adress']}\n"
        f"{i18n.get_text('stamp_check_datas_info.phone', lang)}{data_to_view['phone_number']}\n"
        f"{i18n.get_text('stamp_check_datas_info.mvd_adress', lang)}{data_to_view['mvd_adress']}"
    )

    await message.answer(text=text, reply_markup=get_stamp_transfer_check_data_before_gen(lang))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –º–∏–Ω–∏-—Å–≤–æ–¥–∫–∏ –∫ –∞–¥—Ä–µ—Å—É/—Ç–µ–ª–µ—Ñ–æ–Ω—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@stamp_transfer_router.callback_query(F.data == "goto_adress_phone")
async def goto_adress_phone(cb: CallbackQuery, state: FSMContext):
    """
    –ù–∞–∂–∞–ª–∏ –≤ –º–∏–Ω–∏-—Å–≤–æ–¥–∫–µ: –∏–¥—ë–º —Å–æ–±–∏—Ä–∞—Ç—å –∞–¥—Ä–µ—Å, –∑–∞—Ç–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω.
    """
    data = await state.get_data()
    lang = data.get("language")

    # –≥–æ—Ç–æ–≤–∏–º –æ—á–µ—Ä–µ–¥—å —à–∞–≥–æ–≤
    await state.update_data(next_states=[LiveAdress.adress, PhoneNumberStates.phone_number_input])

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
    await state.update_data(waiting_data="live_adress")
    await state.set_state(LiveAdress.adress)
    prompt = i18n.get_text("live_adress.ask", lang)
    if prompt.startswith("[Missing:"):
        prompt = "üìù –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –†–§ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å/—Å—Ç—Ä–æ–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∫–≤–∞—Ä—Ç–∏—Ä–∞."
    await cb.message.edit_text(prompt)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–∏–Ω–∞–ª: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@stamp_transfer_router.callback_query(F.data == "all_true_in_stamp")
async def handle_all_true_in_stamp(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    state_data = await state.get_data()
    lang = state_data.get("language")

    # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –≤ –≥–æ—Ä–æ–¥ / —É–ª–∏—Ü—É / –¥–æ–º
    addr = (state_data.get("live_adress") or "").strip()
    parts = [p.strip() for p in addr.split(",") if p.strip()]
    city = parts[0] if len(parts) > 0 else ""
    street = parts[1] if len(parts) > 1 else ""
    house = ", ".join(parts[2:]) if len(parts) > 2 else ""

    data = {
        "mvd_adress": state_data.get("mvd_adress", ""),
        "citizenship": (state_data.get("passport_data", {}) or {}).get("citizenship", ""),
        "full_name": (state_data.get("passport_data", {}) or {}).get("full_name", "") or (state_data.get("old_passport_data", {}) or {}).get("full_name", ""),
        "city": city,
        "street": street,
        "house": house,
        "phone": state_data.get("phone_number", ""),
        "old_passport_number": (state_data.get("old_passport_data", {}) or {}).get("passport_serial_number", ""),
        "old_passport_issue_place": (state_data.get("old_passport_data", {}) or {}).get("passport_issue_place", ""),
        "old_passport_issue_date": (state_data.get("old_passport_data", {}) or {}).get("passport_issue_date", ""),
        "old_passport_expire_date": (state_data.get("old_passport_data", {}) or {}).get("passport_expiry_date", ""),
        "new_passport_number": (state_data.get("passport_data", {}) or {}).get("passport_serial_number", ""),
        "new_passport_issue_place": (state_data.get("passport_data", {}) or {}).get("passport_issue_place", ""),
        "new_passport_issue_date": (state_data.get("passport_data", {}) or {}).get("passport_issue_date", ""),
        "new_passport_expire_date": (state_data.get("passport_data", {}) or {}).get("passport_expiry_date", ""),
    }

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ DOCX (—Å –∑–∞—â–∏—Ç–æ–π)
    try:
        pprint(data)
        doc = create_user_doc(context=data, template_name='template_ready', user_path='pdf_generator')
        if not doc:
            raise RuntimeError("create_user_doc –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        ready_doc = FSInputFile(doc, filename='–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ —à—Ç–∞–º–ø–∞ –í–ù–ñ.docx')
    except Exception as e:
        pprint({"create_doc_error": str(e), "state_data": state_data})
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç
    text = f"{i18n.get_text('ready_to_download_doc', lang)}\n"
    await callback.message.edit_text(text=text)
    await callback.message.answer_document(document=ready_doc)
